{"version":3,"sources":["services/AuthService.js","actions/auth.js","actions/chat.js","middleware/SubscriptionService.js","actions/stomp.js","component/wigets/LoadingSpinner.js","component/login/Login.js","component/entrance/Entrance.js","component/room/RoomCard.js","component/room/RoomList.js","component/user/User.js","component/message/Message.js","component/room/Room.js","component/chat/ChatPane.js","component/chat/Chat.js","reducers/auth.js","reducers/stomp.js","reducers/chat.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchToken","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","email","password","response","json","wrap","_context","prev","next","fetch","method","headers","Authorization","Content-Type","body","JSON","stringify","sent","abrupt","tokens","stop","this","_x","_x2","apply","arguments","loginRequestingAction","type","loginSucceedAction","accessToken","loginFailedAction","logoutAction","logout","dispatch","localStorage","removeItem","subscribeTopic","topic","handler","length","undefined","handleChatEvent","subscribeTopicAction","unsubscribeTopic","topicUri","unsubscribeTopicAction","publish","destination","content","data","toPublishAction","topicSubscribedAction","topicUnsubscribedAction","enteringRoomAction","exitingRoomAction","selectUser","attendee","selectedUserAction","chatEventHandler","ALL_ROOMS_FETCHED","event","rooms","CHAT_MESSAGE","message","ROOM_CREATED","room","ROOM_DETAILS_FETCHED","concat","id","USER_ENTERED","USER_EXITED","roomId","USER_CONNECTED","disconnectWS","console","log","parse","stompClientConnectFailedAction","stompClientDisconnectedAction","stompClient","stompClientWillDisconnectAction","STOMP_CLIENT_TO_DISCONNECT","stompClientToDisconnectAction","LoadingSpinner","react_default","createElement","className","Component","Login","state","editText","_this","setState","defineProperty","target","name","value","isLoggedIn","props","_this$props","_this$props2","isLoading","login","_this$state","component_wigets_LoadingSpinner","onChange","placeholder","onClick","connect","stompReducer","authReducer","token","setItem","t0","error","Entrance","displayName","connectWS","isConnected","disabled","Client","brokerURL","connectHeaders","debug","str","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","me","fetchedMeAction","stompClientConnectedAction","onDisconnect","onError","activate","RoomCard","isSelected","select","unselect","enterRoom","onMouseOver","onMouseOut","totalAttendees","uri","RoomList","createRoom","map","component_room_RoomCard","key","chatReducer","User","speakingTo","selectedClass","Message","extraClass","from","user","timeStamp","Room","exitRoom","unselectUser","sendMessage","_this$props3","sessionId","_this$props4","subscribe","_this$props5","roomMessages","userMessages","messages","attendees","filter","component_user_User","m","component_message_Message","currentRoom","exitedRoomAction","unsubscribe","ChatPane","component_room_RoomList","component_room_Room","Chat","component_entrance_Entrance","component_login_Login","component_chat_ChatPane","initState","getItem","topics","rootReducer","combineReducers","action","objectSpread","_action$message","to","assign","push","startsWith","slice","index","indexOf","splice","store","createStore","composeWithDevTools","applyMiddleware","thunk","getState","subscription","forEach","deactivate","App","es","component_chat_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3d9d80d.chunk.js","sourcesContent":["const authUrl = 'https://auth.lasfu.roro3.com/login';\nconst ACCESSTOKEN = 'accessToken';\n\nexport const fetchToken = async (email, password) => {\n  const response = await fetch(authUrl, {\n    method: 'POST',\n    headers: {\n      Authorization: 'Basic bG9uZ3Rlcm1fY2xpZW50OmFjbWVzZWNyZXQ=',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      email,\n      password,\n    }),\n  });\n  const json = await response.json();\n  return json.tokens;\n};\n\nexport const saveAccessToken = token => {\n  if (token && token.length > 0) localStorage.setItem(ACCESSTOKEN, token);\n};\n\nexport const getStoredAccessToken = () => {\n  return localStorage.getItem('accessToken');\n};\n\nexport const removeAccessToken = () => {\n  localStorage.removeItem(ACCESSTOKEN);\n};\n","import {\n  fetchToken,\n  saveAccessToken,\n  removeAccessToken,\n} from '../services/AuthService';\n\nexport const LOGIN_REQUESTING = 'LOGIN_REQUESTING';\nconst loginRequestingAction = {\n  type: LOGIN_REQUESTING,\n};\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS ';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\nconst loginSucceedAction = accessToken => ({\n  type: LOGIN_SUCCESS,\n  accessToken,\n});\nconst loginFailedAction = {\n  type: LOGIN_FAILED,\n};\n\nexport const login = (email, password) => async dispatch => {\n  dispatch(loginRequestingAction);\n  try {\n    const tokens = await fetchToken(email, password);\n    const accessToken = tokens.accessToken;\n    saveAccessToken(accessToken);\n    dispatch(loginSucceedAction(accessToken));\n  } catch (e) {\n    /* handle error */\n    console.error(e);\n    dispatch(loginFailedAction);\n  }\n};\n\nexport const LOGOUT = 'LOGOUT';\nconst logoutAction = {\n  type: LOGOUT,\n};\n\nexport const logout = () => dispatch => {\n  removeAccessToken();\n  dispatch(logoutAction);\n};\n","import {\n  TO_SUBSCRIBE_TOPIC,\n  TO_UNSUBSCRIBE_TOPIC,\n  TO_PUBLISH,\n} from '../middleware/SubscriptionService';\n\nimport { disconnectWS } from '../actions/stomp';\n\nconst subscribeTopicAction = (topic, handler) => ({\n  type: TO_SUBSCRIBE_TOPIC,\n  topic,\n  handler,\n});\nexport const subscribeTopic = (topic, handler = handleChatEvent) => dispatch =>\n  dispatch(subscribeTopicAction(topic, handler));\n\nconst unsubscribeTopicAction = topicUri => ({\n  type: TO_UNSUBSCRIBE_TOPIC,\n  topicUri,\n});\nexport const unsubscribeTopic = topicUri => dispatch =>\n  dispatch(unsubscribeTopicAction(topicUri));\n\nconst toPublishAction = (destination, content = {}) => ({\n  type: TO_PUBLISH,\n  data: {\n    destination,\n    body: JSON.stringify(content),\n  },\n});\nexport const publish = (destination, content) => dispatch =>\n  dispatch(toPublishAction(destination, content));\n\nexport const TOPIC_SUBSCRIBED = 'TOPIC_SUBSCRIBED';\nexport const topicSubscribedAction = topic => ({\n  type: TOPIC_SUBSCRIBED,\n  topic,\n});\n\nexport const TOPIC_UNSUBSCRIBED = 'TOPIC_UNSUBSCRIBED';\nexport const topicUnsubscribedAction = topic => ({\n  type: TOPIC_UNSUBSCRIBED,\n  topic,\n});\n\nexport const ENTERING_ROOM = 'ENTERING_ROOM';\nconst enteringRoomAction = {\n  type: ENTERING_ROOM,\n};\n// export const ENTERED_ROOM = 'ENTERED_ROOM';\n// const enteredRoomAction = {\n//   type: ENTERED_ROOM,\n// };\n\nexport const enterRoom = room => dispatch => {\n  // console.log(room);\n  dispatch(enteringRoomAction);\n  dispatch(subscribeTopic({ uri: `/topic/room.${room.id}` }, handleChatEvent));\n  dispatch(publish(`/app/room.${room.id}.details`, {}));\n};\n\nexport const EXITING_ROOM = 'EXITING_ROOM';\nconst exitingRoomAction = {\n  type: EXITING_ROOM,\n};\n\nexport const EXITED_ROOM = 'EXITED_ROOM';\nconst exitedRoomAction = room => ({\n  type: EXITED_ROOM,\n  room,\n});\n\nexport const exitRoom = room => dispatch => {\n  dispatch(exitingRoomAction);\n  dispatch(publish(`/app/room.${room.id}.exit`, {}));\n  dispatch(unsubscribeTopic(`/topic/room.${room.id}`));\n  dispatch(exitedRoomAction(room));\n  // refresh all rooms\n  dispatch(publish('/app/room.showall'));\n};\n\nexport const SELECTED_USER = 'SELECTED_USER';\nconst selectedUserAction = attendee => ({\n  type: SELECTED_USER,\n  attendee,\n});\n\nexport const selectUser = attendee => dispatch => {\n  dispatch(selectedUserAction(attendee));\n};\n\nexport const FETCHED_ME = 'FETCHED_ME';\nconst fetchedMeAction = me => ({\n  type: FETCHED_ME,\n  me,\n});\n\nexport const fetchedMe = me => dispatch => {\n  dispatch(fetchedMeAction(me));\n};\n\n/*************************************************************************/\n/* handlers for stomp messages */\nexport const ALL_ROOMS_FETCHED = 'ALL_ROOMS_FETCHED';\nconst allRoomsFetchedAction = rooms => ({\n  type: ALL_ROOMS_FETCHED,\n  rooms,\n});\nconst handleAllRoomsFetched = event => allRoomsFetchedAction(event.rooms);\n\nexport const ROOM_DETAILS_FETCHED = 'ROOM_DETAILS_FETCHED';\nconst roomDetailsFetched = room => ({\n  type: ROOM_DETAILS_FETCHED,\n  room,\n});\nconst handleRoomDetailsFetched = event => dispatch => {\n  dispatch(roomDetailsFetched(event.room));\n  dispatch(publish(`/app/room.${event.room.id}.enter`, {}));\n};\n\nexport const ROOM_CREATED = 'ROOM_CREATED';\nconst roomCreatedAction = room => ({\n  type: ROOM_CREATED,\n  room,\n});\nconst handleRoomCreated = event => roomCreatedAction(event.room);\n\nexport const USER_ENTERED = 'USER_ENTERED';\nconst userEnteredAction = attendee => ({\n  type: USER_ENTERED,\n  attendee,\n});\nconst handleUserEntered = event => userEnteredAction(event.attendee);\n\nexport const USER_EXITED = 'USER_EXITED';\nconst userExitRoomAction = attendee => ({\n  type: USER_EXITED,\n  attendee,\n});\nconst handleUserExited = event =>\n  userExitRoomAction(event.roomId, event.attendee);\n\nexport const CHAT_MESSAGE = 'CHAT_MESSAGE';\nconst chatMessageAction = message => ({\n  type: CHAT_MESSAGE,\n  message,\n});\nexport const handleChatMessage = event => dispatch => {\n  dispatch(chatMessageAction(event.message));\n};\n\nexport const USER_CONNECTED = 'USER_CONNECTED';\nconst handleUserConnected = event => dispatch => {\n  dispatch(disconnectWS());\n  // console.log(event);\n};\n\n/**\n * map event handler to type.\n * !!! BESURE THE ACTUAL HANDLERS ARE DEFINED BEFORE THIS MAP.\n */\nconst chatEventHandler = {\n  ALL_ROOMS_FETCHED: handleAllRoomsFetched,\n  CHAT_MESSAGE: handleChatMessage,\n  ROOM_CREATED: handleRoomCreated,\n  ROOM_DETAILS_FETCHED: handleRoomDetailsFetched,\n  USER_ENTERED: handleUserEntered,\n  USER_EXITED: handleUserExited,\n  USER_CONNECTED: handleUserConnected,\n};\n\nexport const handleChatEvent = (dispatch, data) => {\n  console.log(data.body);\n  const event = JSON.parse(data.body);\n  dispatch(chatEventHandler[event.type](event));\n};\n","import {\n  // handleChatEvent,\n  topicSubscribedAction,\n  topicUnsubscribedAction,\n} from '../actions/chat.js';\n\nimport {\n  STOMP_CLIENT_TO_DISCONNECT,\n  stompClientDisconnectedAction,\n} from '../actions/stomp.js';\n\nexport const TO_SUBSCRIBE_TOPIC = 'TO_SUBSCRIBE_TOPIC';\nexport const TO_UNSUBSCRIBE_TOPIC = 'TO_UNSUBSCRIBE_TOPIC';\nexport const TO_PUBLISH = 'TO_PUBLISH';\n\nexport const subscriptionService = ({\n  getState,\n  dispatch,\n}) => next => action => {\n  console.log('subscription middleware trigered.');\n  // console.log(getState());\n  const { stompClient } = getState().stompReducer;\n  const { topics } = getState().chatReducer;\n  const { type } = action;\n\n  if (type === TO_SUBSCRIBE_TOPIC) {\n    const { topic, handler } = action;\n    topic.subscription = stompClient.subscribe(topic.uri, data =>\n      handler(dispatch, data),\n    );\n\n    // console.log(result);\n    dispatch(topicSubscribedAction(topic));\n  }\n\n  if (type === TO_UNSUBSCRIBE_TOPIC) {\n    if (topics.length === 0) next(action);\n    const { topicUri } = action;\n    const topic = topics.filter(topic => topic.uri === topicUri)[0];\n    console.log('To unsubscribe topic: ');\n    console.log(topic);\n    topic.subscription.unsubscribe();\n    dispatch(topicUnsubscribedAction(topic));\n  }\n\n  if (type === TO_PUBLISH) {\n    stompClient.publish(action.data);\n  }\n\n  if (type === STOMP_CLIENT_TO_DISCONNECT) {\n    const { topics } = getState().chatReducer;\n    topics.forEach(topic => stompClient.unsubscribe(topic));\n    stompClient.deactivate();\n    dispatch(stompClientDisconnectedAction);\n  }\n\n  next(action);\n\n  /*\n\n  switch (action.type) {\n\n    case TOPIC_SUBSCRIBE:\n      const { topic, handler } = action;\n      stompClient.subscribe(topic, data => handler(dispatch, data));\n      dispatch(topicSubscribedAction(action.topic));\n      break;\n    case TOPIC_UNSUBSCRIBE:\n      stompClient.unsubscribe(action.topic);\n      dispatch(topicUnsubscribedAction(action.topic));\n      break;\n    case STOMP_CLIENT_TO_DISCONNECT:\n      const { topics } = getState().chatReducer;\n      topics.forEach(topic => stompClient.unsubscribe(topic));\n      stompClient.deactivate();\n      dispatch(stompClientDisconnectedAction);\n      break;\n    default:\n      break;\n  }\n  next(action);\n  */\n};\n","import { Client } from '@stomp/stompjs';\n// import { chatService } from '../services/ChatService';\n\nimport { fetchedMe } from './chat';\n\nexport const STOMP_CLIENT_CONNECTED = 'STOMP_CLIENT_CONNECTED';\nconst stompClientConnectedAction = stompClient => ({\n  type: STOMP_CLIENT_CONNECTED,\n  stompClient,\n});\nexport const STOMP_CLIENT_CONNECT_FAILED = 'STOMP_CLIENT_CONNECT_FAILED';\nconst stompClientConnectFailedAction = {\n  type: STOMP_CLIENT_CONNECT_FAILED,\n};\n\nexport const connectWS = (accessToken, displayName) => dispatch => {\n  const stompClient = new Client({\n    brokerURL: 'ws://devserver.my:8080/wsdemo',\n    connectHeaders: {\n      displayName,\n      accessToken,\n    },\n    debug: function(str) {\n      console.log(str);\n    },\n    reconnectDelay: 0,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n  stompClient.onConnect = frame => {\n    console.log(frame);\n    dispatch(fetchedMe(frame.headers['user-name']));\n    dispatch(stompClientConnectedAction(stompClient));\n  };\n  stompClient.onDisconnect = frame => {\n    dispatch(stompClientDisconnectedAction);\n  };\n  stompClient.onError = frame => {\n    console.log(`Broker reported error: ${frame.headers['message']}`);\n    console.log(`Additional details: ${frame.body}`);\n    dispatch(stompClientConnectFailedAction);\n  };\n  stompClient.activate();\n};\n\nexport const STOMP_CLIENT_DISCONNECTED = 'STOMP_CLIENT_DISCONNECTED';\nexport const stompClientDisconnectedAction = {\n  type: STOMP_CLIENT_DISCONNECTED,\n  stompClient: null,\n};\n\nexport const STOMP_CLIENT_WILL_DISCONNECT = 'STOMP_CLIENT_WILL_DISCONNECT';\nconst stompClientWillDisconnectAction = {\n  type: STOMP_CLIENT_WILL_DISCONNECT,\n};\n\nexport const STOMP_CLIENT_TO_DISCONNECT = 'STOMP_CLIENT_TO_DISCONNECT';\nconst stompClientToDisconnectAction = {\n  type: STOMP_CLIENT_TO_DISCONNECT,\n};\nexport const disconnectWS = () => dispatch => {\n  dispatch(stompClientWillDisconnectAction);\n  dispatch(stompClientToDisconnectAction);\n};\n","import React, { Component } from 'react';\nimport './LoadingSpinner.css';\n\nclass LoadingSpinner extends Component {\n  render() {\n    return (\n      <div className=\"lds-ring\">\n        <div />\n        <div />\n        <div />\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport { login, logout } from '../../actions/auth';\nimport { disconnectWS } from '../../actions/stomp';\nimport { connect } from 'react-redux';\nimport LoadingSpinner from '../wigets/LoadingSpinner';\nimport './Login.css';\n\nclass Login extends Component {\n  state = {\n    email: '',\n    password: '',\n  };\n\n  editText = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  isLoggedIn = () => {\n    const { accessToken } = this.props;\n    // console.log(accessToken);\n    return accessToken && accessToken.length > 0;\n  };\n\n  logout = () => {\n    const { stompClient, disconnectWS, logout } = this.props;\n    if (stompClient !== null) {\n      disconnectWS(stompClient);\n    }\n    logout();\n  };\n\n  render() {\n    const { isLoading, login } = this.props;\n    const { email, password } = this.state;\n    // console.log(`email: ${email}, password: ${password}`);\n    return (\n      <div className=\"login\">\n        {isLoading && <LoadingSpinner />}\n        {!this.isLoggedIn() && (\n          <div>\n            <input\n              type=\"text\"\n              name=\"email\"\n              onChange={this.editText}\n              placeholder=\"user@example.com\"\n              value={email}\n            />\n            <input\n              type=\"password\"\n              name=\"password\"\n              onChange={this.editText}\n              placeholder=\"Enter password\"\n            />\n            <button onClick={() => login(email, password)}>Login</button>\n          </div>\n        )}\n        {this.isLoggedIn() && (\n          <div>\n            <button onClick={this.logout}>Logout</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  stompClient: state.stompReducer.stompClient,\n  isLoading: state.authReducer.isLoading,\n  accessToken: state.authReducer.accessToken,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  disconnectWS: stompClient => disconnectWS(stompClient),\n  login: (email, password) => dispatch(login(email, password)),\n  logout: () => dispatch(logout()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login);\n","import React, { Component } from 'react';\nimport './Entrance.css';\nimport { connectWS, disconnectWS } from '../../actions/stomp';\nimport { connect } from 'react-redux';\n\nclass Entrance extends Component {\n  state = {\n    displayName: '',\n  };\n\n  isLoggedIn = () => {\n    const { accessToken } = this.props;\n    return accessToken && accessToken.length > 0;\n  };\n\n  editText = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  disconnectWS = event => {\n    console.log('CLICK');\n    this.props.disconnectWS();\n  };\n\n  render() {\n    const { connectWS, accessToken, isConnected } = this.props;\n    const { displayName } = this.state;\n    return (\n      <div className=\"entrance\">\n        <input\n          type=\"text\"\n          name=\"displayName\"\n          value={this.state.displayName}\n          onChange={this.editText}\n          disabled={!this.isLoggedIn() || isConnected}\n          placeholder=\"Nick name\"\n        />\n        {!isConnected && (\n          <button\n            disabled={!this.isLoggedIn() || this.state.displayName === ''}\n            onClick={() => connectWS(accessToken, displayName)}>\n            Start Chatting\n          </button>\n        )}\n        {isConnected && <button onClick={this.disconnectWS}>Leave</button>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isConnected: state.stompReducer.isConnected,\n  accessToken: state.authReducer.accessToken,\n  stompClient: state.stompReducer.stompClient,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  connectWS: (accessToken, displayName) =>\n    dispatch(connectWS(accessToken, displayName)),\n  disconnectWS: () => dispatch(disconnectWS()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Entrance);\n","import React, { Component } from 'react';\nimport { enterRoom } from '../../actions/chat';\nimport { connect } from 'react-redux';\n\nimport './RoomCard.css';\n\nclass RoomCard extends Component {\n  state = {\n    isSelected: false,\n  };\n\n  select = event => {\n    this.setState({ isSelected: true });\n  };\n  unselect = event => {\n    this.setState({ isSelected: false });\n  };\n\n  enterRoom = () => {\n    console.log('CLICKED');\n    this.props.enterRoom(this.props.room);\n  };\n\n  render() {\n    const { room } = this.props;\n    return (\n      <div\n        className=\"room-card\"\n        onMouseOver={this.select}\n        onMouseOut={this.unselect}>\n        <h3>{room.name}</h3>\n        <div>\n          <span className=\"caption\">Current: </span>\n          <span>{room.totalAttendees} attendees.</span>\n        </div>\n        <button\n          className={this.state.isSelected ? 'hovering' : ''}\n          onClick={this.enterRoom}>\n          Enter\n        </button>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  enterRoom: room => dispatch(enterRoom(room)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(RoomCard);\n","import React, { Component } from 'react';\nimport './RoomList.css';\nimport { connect } from 'react-redux';\nimport RoomCard from './RoomCard';\n\nclass RoomList extends Component {\n  state = {\n    name: '',\n  };\n\n  editText = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  createRoom = event => {\n    const { stompClient } = this.props;\n    const { name } = this.state;\n    stompClient.publish({\n      destination: '/app/room.create',\n      body: JSON.stringify({ name }),\n    });\n    this.setState({\n      name: '',\n    });\n  };\n\n  render() {\n    const { rooms } = this.props;\n    console.log(rooms);\n    return (\n      <div>\n        <h2>Rooms</h2>\n        <div>\n          <div>Create a room</div>\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={this.editText}\n            value={this.state.name}\n          />\n          <button onClick={this.createRoom} disabled={this.state.name === ''}>\n            Create\n          </button>\n        </div>\n        {rooms.length === 0 && <p>No body is chatting now.</p>}\n        <div className=\"room-list\">\n          {rooms.length > 0 &&\n            rooms.map(room => <RoomCard key={room.id} room={room} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.chatReducer.rooms,\n  stompClient: state.stompReducer.stompClient,\n});\nexport default connect(mapStateToProps)(RoomList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { selectUser } from '../../actions/chat';\nimport './User.css';\n\nclass User extends Component {\n  selectUser = event => {\n    const { attendee, selectUser, speakingTo } = this.props;\n    if (attendee === speakingTo) return;\n    selectUser(attendee);\n  };\n  render() {\n    const { attendee, speakingTo } = this.props;\n    const selectedClass = attendee === speakingTo ? ' selected' : '';\n    return (\n      <div className={'user-card' + selectedClass} onClick={this.selectUser}>\n        <span>{attendee.displayName}</span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  speakingTo: state.chatReducer.speakingTo,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  selectUser: attendee => dispatch(selectUser(attendee)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(User);\n","import React, { Component } from 'react';\nimport './Message.css';\nimport { connect } from 'react-redux';\n\nclass Message extends Component {\n  render() {\n    const { message, me } = this.props;\n    const extraClass = message.from.user.id === me ? ' self' : ' peer';\n    return (\n      <div className={'message' + extraClass}>\n        <span>{message.from.displayName} says </span>\n        <span>{message.timeStamp}</span>\n        <p>{message.content}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  me: state.chatReducer.me,\n});\n\nexport default connect(mapStateToProps)(Message);\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  exitRoom,\r\n  subscribeTopic,\r\n  unsubscribeTopic,\r\n  selectUser,\r\n  publish,\r\n} from '../../actions/chat';\r\nimport User from '../user/User';\r\nimport Message from '../message/Message';\r\nimport './Room.css';\r\n\r\nclass Room extends Component {\r\n  state = {\r\n    message: '',\r\n  };\r\n\r\n  exitRoom = () => {\r\n    const { exitRoom, room } = this.props;\r\n    exitRoom(room);\r\n  };\r\n\r\n  ComponentDidMount() {\r\n    const { room, subscribe } = this.props;\r\n    subscribe(`/app/${room.id}/enter`);\r\n  }\r\n\r\n  unselectUser = event => {\r\n    const { speakingTo, selectUser } = this.props;\r\n    if (speakingTo === null) return;\r\n    selectUser(null);\r\n  };\r\n\r\n  editText = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  sendMessage = event => {\r\n    const { publish, speakingTo, room } = this.props;\r\n    const { message } = this.state;\r\n\r\n    if (speakingTo === null) {\r\n      publish(`/app/room.${room.id}.message`, { message });\r\n    } else {\r\n      publish(`/app/user.${speakingTo.sessionId}.message`, { message });\r\n    }\r\n    this.setState({ message: '' });\r\n  };\r\n\r\n  render() {\r\n    const { room, me, speakingTo, roomMessages, userMessages } = this.props;\r\n    const messages =\r\n      speakingTo === null\r\n        ? roomMessages[room.id]\r\n        : userMessages[speakingTo.user.id];\r\n    const attendees = room.attendees;\r\n    return (\r\n      <div className=\"room\">\r\n        <div className=\"room-control\">\r\n          <span className=\"room-caption\">Room: {room.name}</span>\r\n          <button onClick={this.exitRoom}>Exit</button>\r\n        </div>\r\n        <div className=\"room-pane\">\r\n          <div className=\"user-pane\">\r\n            <h4 className=\"centered\">Users</h4>\r\n            <div className=\"user-public\" onClick={this.unselectUser}>\r\n              <span>public</span>\r\n            </div>\r\n            {attendees.length > 0 &&\r\n              attendees\r\n                .filter(a => a.user.id !== me)\r\n                .map(attendee => (\r\n                  <User attendee={attendee} key={attendee.user.id} />\r\n                ))}\r\n          </div>\r\n          <div className=\"message-pane\">\r\n            <h4 className=\"centered\">messages</h4>\r\n            <div className=\"message-display\">\r\n              {messages && messages.length > 0 ? (\r\n                messages.map(m => <Message message={m} key={m.timeStamp} />)\r\n              ) : (\r\n                <span>No messages for now.</span>\r\n              )}\r\n            </div>\r\n            <div className=\"message-enter\">\r\n              <span>Speaking to: </span>\r\n              <span>\r\n                {speakingTo === null ? 'public' : speakingTo.displayName}\r\n              </span>\r\n              <br />\r\n              <input\r\n                className=\"message-input\"\r\n                name=\"message\"\r\n                value={this.state.message}\r\n                type=\"text\"\r\n                onChange={this.editText}\r\n                placeholder=\"Input message\"\r\n              />\r\n              <button onClick={this.sendMessage}>Send</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  me: state.chatReducer.me,\r\n  speakingTo: state.chatReducer.speakingTo,\r\n  room: state.chatReducer.currentRoom,\r\n  roomMessages: state.chatReducer.roomMessages,\r\n  userMessages: state.chatReducer.userMessages,\r\n  stompClient: state.stompReducer.stompClient,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  exitRoom: room => dispatch(exitRoom(room)),\r\n  subscribe: topic => dispatch(subscribeTopic(topic)),\r\n  unsubscribe: topic => dispatch(unsubscribeTopic(topic)),\r\n  publish: (destination, content) => dispatch(publish(destination, content)),\r\n  selectUser: attendee => dispatch(selectUser(attendee)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Room);\r\n","import React, { Component } from 'react';\nimport RoomList from '../room/RoomList';\nimport Room from '../room/Room';\nimport { connect } from 'react-redux';\nimport { subscribeTopic, publish } from '../../actions/chat';\n\nimport './ChatPane.css';\n\nclass ChatPane extends Component {\n  componentDidMount() {\n    const { subscribe, publish } = this.props;\n    subscribe({ uri: '/user/queue/events' });\n    subscribe({ uri: '/topic/events' });\n    publish('/app/room.showall');\n  }\n\n  render() {\n    const { currentRoom } = this.props;\n    return (\n      <div className=\"chat-area\">\n        {currentRoom === null ? (\n          <div className=\"room-pane\">\n            <RoomList />\n          </div>\n        ) : (\n          <div className=\"dialog-pane\">\n            <Room />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentRoom: state.chatReducer.currentRoom,\n  // stompClient: state.stompReducer.stompClient,\n  isConnected: state.stompReducer.isConnected,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  subscribe: topic => dispatch(subscribeTopic(topic)),\n  publish: (destination, content) => dispatch(publish(destination, content)),\n  // unsubscribe: topic => dispatch(unsubscribeTopic(topic)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChatPane);\n","import React, { Component } from 'react';\nimport Login from '../login/Login';\nimport Entrance from '../entrance/Entrance';\nimport { connect } from 'react-redux';\nimport ChatPane from './ChatPane';\nimport './Chat.css';\n\nclass Chat extends Component {\n  render() {\n    const { isConnected } = this.props;\n    return (\n      <div className=\"chat\">\n        <h1>Websocket Chat Demo</h1>\n        <div className=\"identity-area\">\n          <div className=\"entrance-pane\">\n            <Entrance />\n          </div>\n          <div className=\"login-pane\">\n            <Login />\n          </div>\n        </div>\n        {isConnected && <ChatPane />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  stompClient: state.stompReducer.stompClient,\n  isConnected: state.stompReducer.isConnected,\n});\n\nexport default connect(mapStateToProps)(Chat);\n","import {\n  LOGIN_REQUESTING,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  LOGOUT,\n} from '../actions/auth';\nimport { getStoredAccessToken } from '../services/AuthService';\n\nconst initState = {\n  isLoading: false,\n  accessToken: getStoredAccessToken(),\n};\n\nexport const authReducer = (state = initState, action) => {\n  const { type } = action;\n  if (type === LOGIN_REQUESTING) {\n    return {\n      ...state,\n      isLoading: true,\n    };\n  }\n\n  if (type === LOGIN_SUCCESS) {\n    return {\n      ...state,\n      isLoading: false,\n      accessToken: action.accessToken,\n    };\n  }\n\n  if (type === LOGIN_FAILED) {\n    return {\n      ...state,\n      isLoading: false,\n    };\n  }\n\n  if (type === LOGOUT) {\n    return {\n      ...state,\n      accessToken: null,\n    };\n  }\n\n  return state;\n};\n","import {\n  STOMP_CLIENT_CONNECTED,\n  STOMP_CLIENT_DISCONNECTED,\n} from '../actions/stomp';\nconst initState = {\n  stompClient: null,\n  isConnected: false,\n};\n\nexport const stompReducer = (state = initState, action) => {\n  switch (action.type) {\n    case STOMP_CLIENT_CONNECTED:\n      return {\n        ...state,\n        stompClient: action.stompClient,\n        isConnected: true,\n      };\n    case STOMP_CLIENT_DISCONNECTED:\n      return {\n        ...state,\n        stompClient: null,\n        isConnected: false,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  ALL_ROOMS_FETCHED,\n  CHAT_MESSAGE,\n  EXITED_ROOM,\n  FETCHED_ME,\n  ROOM_DETAILS_FETCHED,\n  ROOM_CREATED,\n  SELECTED_USER,\n  TOPIC_SUBSCRIBED,\n  TOPIC_UNSUBSCRIBED,\n  USER_ENTERED,\n  USER_EXITED,\n} from '../actions/chat';\n\nimport { STOMP_CLIENT_WILL_DISCONNECT } from '../actions/stomp';\n\nconst initState = {\n  currentRoom: null,\n  me: null,\n  rooms: [],\n  speakingTo: null,\n  topics: [],\n  userMessages: {},\n  roomMessages: {},\n};\n\nexport const chatReducer = (state = initState, action) => {\n  const { type } = action;\n\n  if (type === STOMP_CLIENT_WILL_DISCONNECT) return initState;\n\n  if (type === CHAT_MESSAGE) {\n    const { to, from } = action.message;\n    if (typeof to === 'object' && to !== null) {\n      const userMessages = Object.assign({}, state.userMessages);\n      const key = to.user.id === state.me ? from.user.id : to.user.id;\n      if (typeof userMessages[key] === 'undefined') {\n        userMessages[key] = [];\n      }\n      userMessages[key].push(action.message);\n      return {\n        ...state,\n        userMessages,\n      };\n    }\n    const roomMessages = Object.assign({}, state.roomMessages);\n    const key = state.currentRoom.id;\n    if (typeof roomMessages[key] === 'undefined') {\n      roomMessages[key] = [];\n    }\n    roomMessages[key].push(action.message);\n    return {\n      ...state,\n      roomMessages,\n    };\n  }\n\n  if (type === SELECTED_USER) {\n    return {\n      ...state,\n      speakingTo: action.attendee,\n    };\n  }\n\n  if (type === FETCHED_ME) {\n    return {\n      ...state,\n      me: action.me,\n    };\n  }\n\n  if (type === TOPIC_SUBSCRIBED) {\n    if (action.topic.uri.startsWith('/app')) return state;\n    const topics = state.topics.slice();\n    topics.push(action.topic);\n    return {\n      ...state,\n      topics,\n    };\n  }\n\n  if (type === TOPIC_UNSUBSCRIBED) {\n    if (action.topic.uri.startsWith('/app')) return state;\n    const topics = state.topics.slice();\n    const index = topics.indexOf(action.topic);\n    if (index >= 0) topics.splice(index, 1);\n    return {\n      ...state,\n      topics,\n    };\n  }\n\n  if (type === ALL_ROOMS_FETCHED) {\n    return {\n      ...state,\n      rooms: action.rooms,\n    };\n  }\n\n  if (type === ROOM_DETAILS_FETCHED) {\n    return {\n      ...state,\n      currentRoom: action.room,\n    };\n  }\n\n  if (type === ROOM_CREATED) {\n    const rooms = state.rooms.slice();\n    rooms.push(action.room);\n    return {\n      ...state,\n      rooms,\n    };\n  }\n\n  if (type === EXITED_ROOM) {\n    return {\n      ...state,\n      currentRoom: null,\n    };\n  }\n\n  if (type === USER_ENTERED) {\n    if (state.currentRoom === null) return state;\n    const currentRoom = Object.assign({}, state.currentRoom);\n    currentRoom.attendees.push(action.attendee);\n    return {\n      ...state,\n      currentRoom,\n    };\n  }\n\n  if (type === USER_EXITED) {\n    if (state.currentRoom == null) return state;\n    const currentRoom = Object.assign({}, state.currentRoom);\n    const attendees = currentRoom.attendees;\n    const index = attendees.indexOf(action.attendee);\n    currentRoom.attendees = attendees.splice(index, 1);\n    return {\n      ...state,\n      currentRoom,\n    };\n  }\n  return state;\n};\n","import { combineReducers } from 'redux';\nimport { authReducer } from './auth';\nimport { stompReducer } from './stomp';\nimport { chatReducer } from './chat';\n\nexport const rootReducer = combineReducers({\n  authReducer,\n  stompReducer,\n  chatReducer,\n});\n\n/*\n * A reducer for actions in template:\n * {\n * type: TYPE,\n * updates: [\n *   {\n *     target: String\n *     value: target_value,\n *     operation:'set'/'add'/'delete'\n *   },\n *   ...\n *   ]\n * }\n */\n\n// export function genericReducer(state, action) {\n//   const { updates } = action;\n//   if (typeof updates === 'undefined') return state;\n\n//   const newState = updates.reduce((accumulate, current) => {\n//     console.log(current);\n//     switch (current.operation) {\n//       case 'set':\n//         return {\n//           ...accumulate,\n//           [current.target]: current.value,\n//         };\n//       case 'add':\n//         const target = state[current.target].slice();\n//         target.push(current.value);\n//         return {\n//           ...accumulate,\n//           [current.target]: target,\n//         };\n//       case 'remove':\n//         const index = state.indexOf(current.value);\n//         return {\n//           ...accumulate,\n//           [current.target]: state[current.target].splice(index, 1),\n//         };\n//       default:\n//         return accumulate;\n//     }\n//   }, {});\n\n//   console.log(newState);\n//   return {\n//     ...state,\n//     ...newState,\n//   };\n// }\n","import { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './reducers';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { subscriptionService } from './middleware/SubscriptionService';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk, subscriptionService)),\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport Chat from './component/chat/Chat';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Chat />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}